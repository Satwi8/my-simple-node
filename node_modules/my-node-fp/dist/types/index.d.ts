declare function alwaysSep(targetPath: string, options: {
    type: 'start_sep_remove' | 'start_sep_append' | 'end_sep_remove' | 'end_sep_append';
    sep?: string;
}): string;

declare function basenames(filename: string, suffix?: string | string[]): string;

declare function endSepAppend(targetPath: string, sep?: string): string;

declare function endSepRemove(targetPath: string, sep?: string): string;

/**
 * check file existing, if file exists return true, don't exists return false
 * @param filePath - filename with path
 */
declare function exists(filePath: string): Promise<boolean>;

/**
 * check file existing, if file exists return true, don't exists return false
 * @param filePath - filename with path
 */
declare function existsSync(filePath: string): boolean;

/**
 * return directory name without filename. If target path is directory name that return same name but
 * target path is file name that return directory name.
 *
 * @param filePath - target path
 * @returns directory name
 */
declare function getDirname(filePath: string): Promise<string>;

/**
 * return directory name without filename. If target path is directory name that return same name but
 * target path is file name that return directory name.
 *
 * Synchronous version of getDirname
 *
 * @param filePath - target path
 * @returns directory name
 */
declare function getDirnameSync(filePath: string): string;

declare function getSep(): "\\" | "/";

/**
 * check target directory is descendant of parent directory
 *
 * @param parentDirPath parent directory path
 * @param targetDirPath child directory path
 * @returns if return true child directory is descendant of parent directory
 */
declare function isDescendant(parentDirPath: string, targetDirPath: string, sep?: string): boolean;

/**
 * check target is directory
 *
 * @param filePath - target file path
 * @returns
 */
declare function isDirectory(filePath: string): Promise<boolean>;

/**
 * check target is directory synchronous
 *
 * @param filePath target file path
 * @returns
 */
declare function isDirectorySync(filePath: string): boolean;

/**
 * check directory is empty
 *
 * @param filePath - target file path
 * @param type - can set directory element type: file only file count, type: directyory: only, not pass count all
 * @returns if return true that direcory empty
 */
declare function isEmptyDir(filePath: string, type?: 'directory' | 'file'): Promise<boolean>;

/**
 * check directory is empty synchronous
 *
 * @param filePath - target file path
 * @param type  can set directory element type: file only file count, type: directyory: only, not pass count all
 * @returns if return true that direcory empty
 */
declare function isEmptyDirSync(filePath: string, type?: 'directory' | 'file'): boolean;

declare function replaceSepToPosix(targetPath: string): string;

declare function replaceSepToWin32(targetPath: string): string;

declare function startSepAppend(targetPath: string, sep?: string): string;

declare function startSepRemove(targetPath: string, sep?: string): string;

declare function win32DriveLetterUpdown(targetPath: string, type?: 'upper' | 'lower'): string;

export { alwaysSep, basenames, endSepAppend, endSepRemove, exists, existsSync, getDirname, getDirnameSync, getSep, isDescendant, isDirectory, isDirectorySync, isEmptyDir, isEmptyDirSync, replaceSepToPosix, replaceSepToWin32, startSepAppend, startSepRemove, win32DriveLetterUpdown };
